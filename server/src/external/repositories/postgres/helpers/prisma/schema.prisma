// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN // system administrator
  ACCESS_ADMIN // matrix user 
  ACCESS_ADMIN_RDC // collaborator with admin access permission for the RDC
  ACCESS_FUNC_RDC // collaborator with employee access permission fot the RDC
}

enum Gender {
  M
  F
}

model User {
  id_user      String         @id @default(uuid())
  username     String         @unique
  email        String         @unique
  password     String
  role         Role
  construction Construction[]
  leader       Collaborator[]
  production   Production[]
}

model Construction {
  id_construction   String         @id @default(uuid())
  code_construction String         @unique
  name_construction String
  users             User[]
  leader            Collaborator[]
  service           Service[]
}

model Garden {
  id_garden String    @id @default(uuid())
  name      String
  Service   Service[]
}

model SubField {
  id_subField String    @id @default(uuid())
  name        String
  Service     Service[]
}

model Measurement {
  id_measurement   String    @id @default(uuid())
  name_measurement String
  symbol           String
  Service          Service[]
}

model Service {
  id_service                  String         @id @default(uuid())
  code_service                String         @unique
  name_service                String
  code_totvs                  String
  activity                    String
  gardenId_garden             String
  measurementId_measurement   String
  subFieldId_subField         String?
  areaId_area                 String?
  foreseen                    String
  advance                     String
  constructionId_construction String
  subfield                    SubField?      @relation(fields: [subFieldId_subField], references: [id_subField])
  garden                      Garden         @relation(fields: [gardenId_garden], references: [id_garden])
  undMeasure                  Measurement    @relation(fields: [measurementId_measurement], references: [id_measurement])
  construction_idConstruction Construction   @relation(fields: [constructionId_construction], references: [id_construction])
  collaborator_idCollaborator Collaborator[]
  disabled_service            Boolean        @default(false)
  production                  Production[]
  Area                        Area?          @relation(fields: [areaId_area], references: [id_area])
}

model Production {
  id_production        String   @id @default(uuid())
  performed_production String
  date_production      String
  note                 String?
  photograph           String
  userId_user          String
  serviceId_service    String
  leader               User     @relation(fields: [userId_user], references: [id_user])
  service_idService    Service  @relation(fields: [serviceId_service], references: [id_service])
  createdAt            DateTime @default(now())
}

model MonitoringUnit {
  id_monitoringUnit String @id @default(uuid())
  code_monitoring   String
  name              String
  description       String
}

model Area {
  id_area String    @id @default(uuid())
  name    String
  service Service[]
}

model Collaborator {
  id_collaborator             String       @id @default(uuid())
  matriculation               String       @unique
  name_collaborator           String
  office_collaborator         String
  city                        String
  gender                      Gender
  disabled_collaborator       Boolean      @default(false)
  responsible                 Boolean
  admission_date              String       @default("0000-00-00")
  resignation_date            String?
  userId_user                 String?
  constructionId_construction String
  service                     Service[]
  user_idUser                 User?        @relation(fields: [userId_user], references: [id_user])
  construction_idConstruction Construction @relation(fields: [constructionId_construction], references: [id_construction])
}
